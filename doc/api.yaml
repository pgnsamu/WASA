openapi: 3.0.3
info:
  title: WASAchat
  description: WASAchat backend REST API
  version: 0.0.1
servers:
- url: http://localhost:3000
components:
  schemas:
    User:
      title: User
      description: "app user"
      type: object
      properties:
        id: 
          description: Unique identifier of a user in the app
          type: integer
          minimum: 0
          readOnly: true
        username: 
          description: Name choose by the user that can represent him in the app
          type: string
          pattern: "^[a-zA-Z0-9_.]+$"
          minLength: 3
          maxLength: 16
        photo:
          description: Image that represent the user
          format: binary
          type: string
          minLength: 0
          maxLength: 10000000
    Reactions:
      title: Reactions
      description: Reactions to a message
      type: object
      properties:
        id: 
          description: Unique identifier of a reaction to a message
          type: integer
          minimum: 0
          readOnly: true
        content:
          description: Content of the reaction
          type: string
          pattern: ".*"
          minLength: 1
          maxLength: 8000
        sentAt:
          description: Unix timestamp of the time when the user sent the reaction
          type: integer
          minimum: 0
        sentBy:
          description: Id of the user that have sent the reaction
          type: integer
          minimum: 0
    Message:
      title: Message
      description: Text or image data sent from a user to another
      type: object
      properties:
        id: 
          description: Unique identifier of a message in the chat
          type: integer 
          readOnly: true
        content: 
          description: Content of the message
          type: string
          pattern: ".*"
          minLength: 1
          maxLength: 8000
        photoContent:
          description: Image that represent the message
          format: binary
          type: string
          minLength: 0
          maxLength: 10000000
        senderId:
          description: Id of the user that have sent the message
          type: integer
          minimum: 0
        sentAt:
          description: Unix timestamp of the time when the user sent the message
          type: integer
          minimum: 0
        status: 
          description: Show if the user have received the message or not
          type: integer
          enum: [0, 1, 2]
        answerTo:
          description: id of the message who this message reply
          type: integer
          minimum: 0
        senderUsername:
          description: username of the sender
          type: string
          pattern: "^[a-zA-Z0-9_.]+$"
          minLength: 3
          maxLength: 16
        isforwarded:
          description: boolean that show if the message is forwarded
          type: boolean
        reactions:
          description: list of reactions to the message
          type: array
          items:
            $ref: '#/components/schemas/Reactions'
          minItems: 0
          maxItems: 100
    Chat:
      title: Chat
      description: Conversations between 2 or more users
      type: object
      properties:
        id: 
          description: Unique identifier of the chat from an user
          type: integer
          minimum: 0
        name:
          description: Name of the chat
          type: string
          pattern: "^[a-zA-Z0-9_.]+$"
          minLength: 3
          maxLength: 16
        isGroup:
          description: Boolean that show if the chat is a group
          type: boolean
        createdAt:
          description: Unix timestamp of the time when the chat was created
          type: integer
          minimum: 0
        description:
          description: Description of the group chat
          type: string
          pattern: "^[a-zA-Z0-9_.]+$"
          minLength: 0
          maxLength: 200
        photo:
          description: Image that represent the chat
          format: binary
          type: string
          minLength: 0
          maxLength: 10000000
        lastMessage:
          $ref: '#/components/schemas/Message'
  securitySchemes:
    BearerAuth: 
      type: http 
      scheme: bearer 
      bearerFormat: JWT
tags:
  - name: "User Management"
    description: "Operations related to managing users"
  - name: "Groupchat Management"
    description: "Operations related to managing group chats"
  - name: "Conversation Based"
    description: "Operations for handling conversations and messages"
security:
  - BearerAuth: []
paths:
  /session:
    post:
      tags: ["User Management"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: username of the user
              type: object
              properties:
                name:
                  description: string representing the username
                  type: string
                  example: "Maria"
                  pattern: "^[a-zA-Z0-9_.]+$"
                  minLength: 3
                  maxLength: 16
        required: true
      security:
        - BearerAuth: []
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: User identifier object
                type: object
                properties:
                  token:
                    description: user identifier
                    type: integer
                    minimum: 0
                  user_id:
                    description: user identifier
                    type: integer
                    minimum: 0
                  username:
                    description: username of the user
                    type: string
                    pattern: "^[a-zA-Z0-9_.]+$"
                    minLength: 3
                    maxLength: 16  
        '400':
          description: Invalid input
        '401':
          description: User must authenticate to log in
        '403':
          description: User is not authorized
        '404':
          description: User not found
        '500':
          description: Internal server error
  /users/{id}:
    parameters:
      - name: id
        in: path
        description: The ID of the user who have to be retrieved
        schema:
          description: Unique ID of the user
          type: integer
          minimum: 0
        required: true
    get: 
      tags: ["User Management"]
      summary: User info
      description: Getting info about a user
      operationId: getUserInfo
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:  
                $ref: "#/components/schemas/User" 
        "400":
          description: Invalid input 
        "401":
          description: User has to authenticate to get info about a user
        "403":
          description: User is not authorized
        "404":
          description: User not found
        '500':
          description: Internal server error      
  /users/{id}/username:
    parameters:
      - name: id
        in: path
        description: The ID of the user who you want to change username
        schema:
          description: Unique ID of the user
          type: integer
          minimum: 0
        required: true
    put: 
      tags: ["User Management"]
      summary: Change username
      description: Update of the username for this service
      operationId: setMyUserName
      requestBody:
        description: User new username over the last one
        content:
          application/json: 
            schema:
              description: the new username object
              type: object
              properties:
                username: 
                  description: string representing the new username of the user
                  type: string
                  pattern: "^[a-zA-Z0-9_.]+$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "200":
          description: Username updated successfully
          content:
            application/json:
              schema:  
                $ref: "#/components/schemas/User" 
        "400":
          description: Invalid input (e.g. username already used)
        "401":
          description: User has to authenticate to change the username
        "403":
          description: User is not authorized
        "404":
          description: utente non trovato
        '500':
          description: Internal server error
  /users/{id}/photo:
    parameters:
      - name: id
        in: path
        description: The ID of the user who you want to change or add photo
        schema:
          description: An integer representing the ID of the user who you want to change or add photo
          type: integer
          minimum: 0
        required: true
    post: 
      tags: ["User Management"]
      summary: Add or Change Photo
      description: Add or Update of the Photo of the user for this service
      operationId: setMyPhoto
      requestBody:
        description: User new Photo over the last one
        content:
          multipart/form-data:
            schema:
              description: User new Photo over the last one
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: The photo file to upload (image)
                  minLength: 0
                  maxLength: 10000000
        required: true
      responses:
        "200":
          description: photo updated successfully
          content:
            application/json:
              schema:
                description: Photo of the user
                type: object
                properties:
                  photo:
                    type: string
                    format: binary
                    description: The photo file
                    minLength: 0
                    maxLength: 10000000
        "400":
          description: Invalid input
        "401":
          description: User have to Auth itself to set a photo
        "403":
          description: User is not authorized
        "404": 
          description: User non trovato 
        '500':
          description: Internal server error
  /users/{id}/conversations/{conversationId}/users:
    parameters:
      - name: id
        in: path
        description: The ID of the user
        schema:
          description: An int representing the ID of the user 
          type: integer
          minimum: 0
        required: true
      - name: conversationId
        in: path
        description: The ID of the group chat (Chat) to add the user to
        schema:
          description: ID of the chat
          type: integer
        required: true
    get:
      tags: ["Conversation Based"]
      summary: Retrieve participants of a conversation
      description: Retrieve the list of participants in a specific conversation
      operationId: getParticipants
      responses:
        '200':
          description: List of participants retrieved successfully
          content:
            application/json:
              schema:
                description: List of users in the conversation
                type: array
                items:
                  $ref: '#/components/schemas/User'
                minItems: 0
                maxItems: 100
        "400":
          description: Invalid input
        "401":
          description: User must authenticate to retrieve participants
        "403":
          description: User is not authorized 
        "404":
          description: Users not found
        '500':
          description: Internal server error
    post:
      tags: ["Groupchat Management"]
      summary: Add a user to a group chat (Chat)
      description: Adds a user to an existing group chat, which is a conversation with isGroup set to true
      operationId: addToGroup
      requestBody:
        description: The user details to add to the group chat
        content:
          application/json: 
            schema:
              description: Object of the user to add or remove from the group chat
              type: object
              properties:
                userId: 
                  type: integer
                  description: The ID of the user to add to the group chat
        required: true
      responses:
        '200':
          description: User successfully added to the group chat
          content:
            application/json:
              schema:
                description: List of users in the group chat
                type: array
                items:
                  $ref: '#/components/schemas/User'
                minItems: 0
                maxItems: 100
        "400":
          description: Invalid input (e.g. invalid user ID)
        "401":
          description: User must authenticate to add someone to a group
        "403":
          description: User is not authorized
        "404":
          description: group chat or user not found
        '500':
          description: Internal server error
    delete:
      tags: ["Groupchat Management"]
      summary: Leave a group chat (Chat)
      description: Allows a user to leave an existing group chat (Chat).
      operationId: leaveGroup
      responses:
        '204':
          description: User successfully left the group chat
        "400":
          description: Invalid input (e.g. user not part of the conversation)
        "401":
          description: User must authenticate to leave the group
        "403":
          description: User is not authorized
        "404":
          description: Conversation not found or user is not a participant
        '500':
          description: Internal server error
  /users/{id}/conversations/{conversationId}/group:
    parameters:
      - name: id
        in: path
        description: The ID of the user
        schema:
          description: An integer representing the ID of the user 
          type: integer
          minimum: 0
        required: true
      - name: conversationId
        in: path
        description: The ID of the group chat (Chat) the user is leaving
        schema:
          description: ID of the GroupChat
          type: integer
        required: true
    put: 
      tags: ["Groupchat Management"]
      summary: Setting up or Change group name
      description: Update or setting up the username for this GroupChat (Chat)
      operationId: setGroupName
      requestBody:
        description: New GroupChat name 
        content:
          application/json: 
            schema:
              description: New GroupChat name 
              type: object
              properties:
                groupName: 
                  description: String representing the new GroupChat name
                  type: string
                  pattern: "^[a-zA-Z0-9_.]+$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "200":
          description: Group name updated successfully
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Chat"
        "400":
          description: Invalid input (e.g. Group name already used)
        "401":
          description: User have to Auth itself to change a Group name
        "403":
          description: User is not authorized
        "404": 
          description: user not found
        '500':
          description: Internal server error       
  /users/{id}/conversations/{conversationId}/photo:
    parameters:
      - name: id
        in: path
        description: The ID of the user 
        schema:
          description: An integer representing the ID of the user
          type: integer
          minimum: 0
        required: true
      - name: conversationId
        in: path
        description: The ID of the group chat (Chat) the user is leaving
        schema:
          description: The ID of the group chat (Chat)
          type: integer
        required: true
    put: 
      tags: ["Groupchat Management"]
      summary: Change GroupChat (Chat) Photo
      description: Update of the Photo of the GroupChat (Chat) selected
      operationId: setGroupPhoto
      requestBody:
        description: Group new Photo over the last one
        content:
          multipart/form-data: 
            schema:
              description: New Photo 
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: The photo file to upload (image)
                  minLength: 0
                  maxLength: 10000000
        required: true
      responses:
        "204":
          description: Group photo updated successfully
        "400":
          description: Invalid input
        "401":
          description: User have to Auth itself to set a photo
        "403":
          description: User is not authorized
        "404": 
          description: User not found
        '500':
          description: Internal server error
  /users/{id}/conversations:
    parameters:
      - name: id
        in: path
        description: The ID of the user 
        schema:
          description: The ID of the user
          type: integer
          minimum: 0
        required: true
    get:
      tags: ["Conversation Based"]
      summary: Retrieve the list of all the user conversations
      description: Retrieve chronologically reversed all the conversation connected with the user
      operationId: getMyConversations
      responses:
        '200':
          description: list of Conversations
          content:
            application/json:
              schema:
                description: Array of the conversation retrieved for the user sent
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
                minItems: 0
                maxItems: 1000000
        "401":
          description: User have to Auth itself to see the Conversations
        "403":
          description: User is not authorized
        '500':
          description: Internal server error
    post: 
      tags: ["Conversation Based"]
      summary: Create a new conversation
      description: Create a new conversation
      operationId: newConversation
      requestBody: 
        description: The info about the conversation
        content:
          multipart/form-data:
            schema:
              description: The info about the conversation
              type: object
              properties:
                name:
                  type: string
                  description: Name of the conversation
                  pattern: "^[a-zA-Z0-9_.]+$"
                  minLength: 3
                  maxLength: 16
                isGroup:
                  type: boolean
                  description: property that define what type of conversation is
                partecipantsId:
                  type: array
                  description: Id's of the users who are invited in the group or private chat
                  items:
                    description: Id of a user
                    type: integer
                    minimum:  0
                  minItems: 1
                  maxItems: 64
                photo:
                  type: string
                  format: binary
                  description: Photo of the group if is a group
                  minLength: 0
                  maxLength: 100000
                description:
                  type: string
                  description: Description of the group chat
                  minLength: 0
                  maxLength: 200
                  pattern: "^[a-zA-Z0-9_.]+$"
              required:
                - isGroup
                - partecipantsId
        required: true
      responses:
        '200':
          description: the new Conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        "401":
          description: User have to Auth itself to see the Conversations
        "403":
          description: User is not authorized
        "404":
          description: User not found
        '500':
          description: Internal server error
  /users/{id}/conversations/{conversationId}:
    get:
      tags: ["Conversation Based"]
      summary: Retrieve a single conversation by ID
      description: Retrieve a specific conversation connected with the user by its ID
      operationId: getConversation
      parameters:
        - name: id
          in: path
          description: The ID of the user
          schema:
            description: The ID of the user
            type: integer
            minimum: 0
          required: true
        - name: conversationId
          in: path
          description: The ID of the conversation to retrieve
          schema:
            description: ID of the conversation
            type: integer
          required: true
      responses:
        '200':
          description: Single conversation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        "401":
          description: User has to authenticate to view the conversation
        "403":
          description: User does not have access rights to the content
        "404":
          description: Conversation not found
        '500':
          description: Internal server error
  /users/{id}/conversations/{conversationId}/messages:
    parameters:
      - name: id
        in: path
        description: The ID of the user 
        schema:
          description: The ID of the user 
          type: integer
          minimum: 0
        required: true
      - name: conversationId
        in: path
        description: The ID of the conversation to send the message to
        schema:
          description: ID of the conversation
          type: integer
          minimum: 0
        required: true
    post:
      tags: ["Conversation Based"]
      summary: Send a message in a conversation
      description: Send a new message to a specific conversation identified by conversationId
      operationId: sendMessage
      requestBody:
        description: The message details to send
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
                schema:
                  description: Conversation where the message is sent
                  type: array
                  items:
                    $ref: '#/components/schemas/Chat'
                  minItems: 0
                  maxItems: 1000000
        "400":
          description: Invalid input
        "401":
          description: User has to authenticate to send the message
        "403":
          description: User does not have access rights to the content
        "404":
          description: Conversation not found
        '500':
          description: Internal server error
    get:
      tags: ["Conversation Based"]
      summary: Retrieve messages from a conversation
      description: Retrieve all messages from a specific conversation
      operationId: getMessagesFromConversation
      responses:
        '200':
          description: List of messages retrieved successfully
          content:
            application/json:
              schema:
                description: List of messages in the conversation
                type: array
                items:
                  $ref: '#/components/schemas/Message'
                minItems: 0
                maxItems: 1000
        "401":
          description: User must authenticate to retrieve messages
        "403":
          description: User is not authorized
        '500':
          description: Internal server error
  /users/{id}/conversations/{conversationId}/messages/{messageId}:
    parameters:
          - name: id
            in: path
            description: The ID of the user
            schema:
              description: The ID of the user
              type: integer
              minimum: 0
            required: true
          - name: conversationId
            in: path
            description: The ID of the conversation where you already have the message
            schema:
              description: ID of the conversation
              type: integer
            required: true
          - name: messageId
            in: path
            description: The ID of the message to forward
            schema:
              description: ID of the message
              type: integer
            required: true
    post:
      tags: ["Conversation Based"]
      summary: Forward a message to a different conversation
      description: Forward an existing message to the specified conversation
      operationId: forwardMessage
      requestBody:
        description: Target conversation and additional details for forwarding the message
        content:
          application/json:
            schema:
              description: Containing conversation and forwarding details
              type: object
              properties:
                targetConversationId:
                  type: integer
                  description: The ID of the target conversation to which the message is being forwarded
              required:
                - targetConversationId
        required: true
      responses:
        '204':
          description: Message forwarded successfully
        "400":
          description: Invalid input
        "401":
          description: User has to authenticate to forward the message
        "403":
          description: User does not have access rights to the content
        "404":
          description: Conversation or message not found
        '500':
          description: Internal server error
    delete:
      tags: ["Conversation Based"]
      summary: Delete a message from the conversation
      description: Deletes a specific message within a conversation
      operationId: deleteMessage
      responses:
        '204':
          description: message deleted successfully
        "400":
          description: Invalid input
        "401":
          description: User must authenticate to delete the message
        "403":
          description: User is not authorized to delete this message
        "404":
          description: Conversation or message not found
        '500':
          description: Internal server error
  /users/{id}/conversations/{conversationId}/messages/{messageId}/comments:
    parameters:
      - name: id
        in: path
        description: The ID of the user 
        schema:
          description: The ID of the user 
          type: integer
          minimum: 0
        required: true
      - name: conversationId
        in: path
        description: The ID of the conversation containing the message to comment on
        schema:
          description: The ID of the conversation
          type: integer
        required: true
      - name: messageId
        in: path
        description: The ID of the message to comment on
        schema:
          description: The ID of the message
          type: integer
        required: true
    post:
      tags: ["Conversation Based"]
      summary: Add a comment to a message
      description: Adds a comment to a specific message within a conversation
      operationId: commentMessage
      requestBody:
        description: The comment as a Message
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      responses:
        '204':
          description: Comment added successfully
        "400":
          description: Invalid input
        "401":
          description: User must authenticate to add a comment
        "403":
          description: User is not authorized
        "404":
          description: Conversation or message not found
        '500':
          description: Internal server error
  /users/{id}/conversations/{conversationId}/messages/{messageId}/comments/{commentId}:
    parameters:
      - name: id
        in: path
        description: The ID of the user 
        schema:
          description: The ID of the user 
          type: integer
          minimum: 0
        required: true
      - name: conversationId
        in: path
        description: The ID of the conversation containing the message to comment on
        schema:
          description: The ID of the conversation
          type: integer
        required: true
      - name: messageId
        in: path
        description: The ID of the message to comment on
        schema:
          description: The ID of the message
          type: integer
        required: true
      - name: commentId
        in: path
        description: The ID of the comment to delete
        schema:
          description: The ID of the comment
          type: integer
        required: true
    delete:
      tags: ["Conversation Based"]
      summary: Delete a comment from a message
      description: Deletes a specific comment on a message within a conversation
      operationId: uncommentMessage
      responses:
        '204':
          description: Comment deleted successfully
        "400":
          description: Invalid input
        "401":
          description: User must authenticate to delete the comment
        "403":
          description: User is not authorized to delete this comment
        "404":
          description: Conversation or comment not found
        '500':
          description: Internal server error
  /users/{id}/conversations/{conversationId}/messages/{messageId}/reactions:
    parameters:
      - name: id
        in: path
        description: The ID of the user
        schema:
          description: The ID of the user
          type: integer
          minimum: 0
        required: true
      - name: conversationId
        in: path
        description: The ID of the conversation containing the message to react to
        schema:
          description: The ID of the conversation
          type: integer
          minimum: 0
        required: true
      - name: messageId
        in: path
        description: The ID of the message to react to
        schema:
          description: The ID of the message
          type: integer
          minimum: 0
        required: true
    post:
      tags: ["Conversation Based"]
      summary: Send a reaction to a message
      description: Send a new reaction to a specific message within a conversation
      operationId: sendReaction
      requestBody:
        description: The reaction details to send
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reactions'
        required: true
      responses:
        '204':
          description: Reaction sent successfully
        "400":
          description: Invalid input
        "401":
          description: User has to authenticate to send the reaction
        "403":
          description: User is not authorized
        "404":
          description: Conversation or message not found
        '500':
          description: Internal server error
  /users/{id}/conversations/{conversationId}/messages/{messageId}/reactions/{reactionId}:
    parameters:
      - name: id
        in: path
        description: The ID of the user
        schema:
          description: The ID of the user
          type: integer
          minimum: 0
        required: true
      - name: conversationId
        in: path
        description: The ID of the conversation containing the message with the reaction
        schema:
          description: The ID of the conversation
          type: integer
          minimum: 0
        required: true
      - name: messageId
        in: path
        description: The ID of the message with the reaction
        schema:
          description: The ID of the message
          type: integer
          minimum: 0
        required: true
      - name: reactionId
        in: path
        description: The ID of the reaction to remove
        schema:
          description: The ID of the reaction
          type: integer
          minimum: 0
        required: true
    delete:
      tags: ["Conversation Based"]
      summary: Remove a reaction from a message
      description: Deletes a specific reaction from a message within a conversation
      operationId: removeReaction
      responses:
        '204':
          description: Reaction removed successfully
        "400":
          description: Invalid input
        "401":
          description: User must authenticate to remove the reaction
        "404":
          description: Conversation, message, or reaction not found
        "403":
          description: User is not authorized
        '500':
          description: Internal server error